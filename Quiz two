/*Area*/
#include <iostream>
#include <cmath>

using namespace std;

// Abstract class Shape
class Shape {
public:
    virtual double area() = 0;
    virtual double perimeter() = 0;
};

// Class Circle derived from Shape
class Circle : public Shape {
private:
    double radius;
public:
    Circle(double r) : radius(r) {}
    double area() override { return M_PI * pow(radius, 2); }
    double perimeter() override { return 2 * M_PI * radius; }
};

// Class Rectangle derived from Shape
class Rectangle : public Shape {
private:
    double length, width;
public:
    Rectangle(double l, double w) : length(l), width(w) {}
    double area() override { return length * width; }
    double perimeter() override { return 2 * (length + width); }
};

// Class Triangle derived from Shape
class Triangle : public Shape {
private:
    double side1, side2, side3;
public:
    Triangle(double s1, double s2, double s3) : side1(s1), side2(s2), side3(s3) {}
    double area() override {
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }
    double perimeter() override { return side1 + side2 + side3; }
};

// Class Square derived from Rectangle
class Square : public Rectangle {
public:
    Square(double s) : Rectangle(s, s) {}
};

int main() {
    Shape* shapes[4];
    shapes[0] = new Circle(5);
    shapes[1] = new Rectangle(4, 6);
    shapes[2] = new Triangle(3, 4, 5);
    shapes[3] = new Square(7);

    for (int i = 0; i < 4; i++) {
        cout << "Shape " << i + 1 << endl;
        cout << "Area: " << shapes[i]->area() << endl;
        cout << "Perimeter: " << shapes[i]->perimeter() << endl;
        cout << endl;
    }

    for (int i = 0; i < 4; i++) {
        delete shapes[i];
    }

    return 0;
}

