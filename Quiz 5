/*XII.	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
By considering the terms in the Fibonacci sequence whose values do not exceed four million, write a C++ method to find the sum of all the even- valued terms. 
*/
#include <iostream>
using namespace std;

int main() {
    int sum = 0;
    int a = 1, b = 2;
    while (b <= 4000000) {
        if (b % 2 == 0) {
            sum += b;
        }
        int c = a + b;
        a = b;
        b = c;
    }
    cout << sum << endl;
    return 0;
}

/*The code initializes a and b to 1 and 2, respectively. It then iterates through the Fibonacci sequence, adding each even-valued term to the sum variable. The loop continues until the value of b exceeds 4,000,000. Finally, the code outputs the value of sum.

Alternatively, you can use the below recursive formula for even Fibonacci Numbers to find the sum of all the even-valued terms in the Fibonacci sequence whose values do not exceed four million:*/

#include<iostream>
using namespace std;

int evenFibSum(int limit) {
    if (limit < 2) {
        return 0;
    }
    long long int ef1 = 0, ef2 = 2;
    long long int sum = ef1 + ef2;
    while (ef2 <= limit) {
        long long int ef3 = 4 * ef2 + ef1;
        if (ef3 > limit) {
            break;
        }
        ef1 = ef2;
        ef2 = ef3;
        sum += ef2;
    }
    return sum;
}

int main() {
    int limit = 4000000;
    cout << evenFibSum(limit) << endl;
    return 0;
}